# 🎬 CinéReserve - Projet Express.js

## 📁 Structure du Projet

```
cine-reserve/
│
├── src/
│   ├── config/
│   │   └── database.js          # Configuration et lecture des fichiers JSON
│   │
│   ├── data/
│   │   ├── films.json           # Base de données des films
│   │   ├── users.json           # Base de données des utilisateurs
│   │   └── reservations.json   # Base de données des réservations
│   │
│   ├── middlewares/
│   │   ├── auth.middleware.js   # Middleware d'authentification
│   │   ├── logger.middleware.js # Middleware de logs
│   │   └── error.middleware.js  # Middleware de gestion d'erreurs
│   │
│   ├── routes/
│   │   ├── films.routes.js      # Routes pour les films
│   │   ├── auth.routes.js       # Routes d'authentification
│   │   └── reservations.routes.js # Routes pour les réservations
│   │
│   ├── controllers/
│   │   ├── films.controller.js
│   │   ├── auth.controller.js
│   │   └── reservations.controller.js
│   │
│   ├── utils/
│   │   └── helpers.js           # Fonctions utilitaires
│   │
│   └── app.js                   # Configuration Express
│
├── server.js                    # Point d'entrée du serveur
├── package.json
└── README.md
```

## 🚀 Installation

```bash
# Initialiser le projet
npm init -y

# Installer les dépendances
npm install express

# Installer les dépendances de développement
npm install --save-dev nodemon

# Démarrer le serveur
npm start

# Mode développement
npm run dev
```

## 📝 Configuration package.json

```json
{
  "name": "cine-reserve",
  "version": "1.0.0",
  "description": "Application de réservation de places de cinéma",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": ["express", "cinema", "reservation"],
  "author": "Votre Nom",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
```

## 🧪 Tester l'API

### 1. Récupérer la liste des films
```bash
curl http://localhost:3000/api/films
```

### 2. S'inscrire
```bash
curl -X POST http://localhost:3000/api/signup \
  -H "Content-Type: application/json" \
  -d '{"username":"john","password":"test123"}'
```

### 3. Se connecter
```bash
curl -X POST http://localhost:3000/api/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"1234"}'
```

### 4. Créer une réservation
```bash
curl -X POST http://localhost:3000/api/reservations \
  -H "Content-Type: application/json" \
  -H "Authorization: admin" \
  -d '{"filmId":1}'
```

### 5. Voir ses réservations
```bash
curl http://localhost:3000/api/reservations \
  -H "Authorization: admin"
```

## 🎯 Fonctionnalités Implémentées

- ✅ Gestion des films (GET /api/films)
- ✅ Authentification (POST /api/login, POST /api/signup)
- ✅ Réservations (POST /api/reservations, GET /api/reservations)
- ✅ Middlewares personnalisés (logger, auth, error handler)
- ✅ Base de données JSON
- ✅ Architecture MVC

## 🔐 Utilisateur par défaut

- **Username**: admin
- **Password**: 1234
